from _typeshed import Incomplete
from zope.interface.interface import Interface as Interface, InterfaceClass as InterfaceClass, NameAndModuleComparisonMixin as NameAndModuleComparisonMixin, Specification as Specification, SpecificationBase as SpecificationBase

__docformat__: str
BuiltinImplementationSpecifications: Incomplete

class named:
    name: Incomplete
    def __init__(self, name) -> None: ...
    def __call__(self, ob): ...

class Declaration(Specification):
    def __init__(self, *bases) -> None: ...
    def __contains__(self, interface) -> bool: ...
    def __iter__(self): ...
    def flattened(self): ...
    def __sub__(self, other): ...
    def __add__(self, other): ...
    __radd__ = __add__

class _ImmutableDeclaration(Declaration):
    def __new__(cls): ...
    def __reduce__(self): ...
    @property
    def __bases__(self): ...
    @property
    def dependents(self): ...
    changed: Incomplete
    subscribe: Incomplete
    unsubscribe: Incomplete
    def interfaces(self): ...
    def extends(self, interface, strict: bool = ...): ...
    def get(self, name, default: Incomplete | None = ...): ...
    def weakref(self, callback: Incomplete | None = ...): ...

class Implements(NameAndModuleComparisonMixin, Declaration):
    inherit: Incomplete
    declared: Incomplete
    __name__: str
    @classmethod
    def named(cls, name, *bases): ...
    def changed(self, originally_changed): ...
    def __reduce__(self): ...

def implementedBy(cls): ...
def classImplementsOnly(cls, *interfaces) -> None: ...
def classImplements(cls, *interfaces) -> None: ...
def classImplementsFirst(cls, iface) -> None: ...

class implementer:
    interfaces: Incomplete
    def __init__(self, *interfaces) -> None: ...
    def __call__(self, ob): ...

class implementer_only:
    interfaces: Incomplete
    def __init__(self, *interfaces) -> None: ...
    def __call__(self, ob): ...

class Provides(Declaration):
    def __init__(self, cls, *interfaces) -> None: ...
    def __reduce__(self): ...
    __module__: str
    def __get__(self, inst, cls): ...
ProvidesClass = Provides
InstanceDeclarations: Incomplete

def directlyProvides(object, *interfaces) -> None: ...
def alsoProvides(object, *interfaces) -> None: ...
def noLongerProvides(object, interface) -> None: ...

class ClassProvidesBase(SpecificationBase):
    def __get__(self, inst, cls): ...

class ClassProvides(Declaration, ClassProvidesBase):
    def __init__(self, cls, metacls, *interfaces) -> None: ...
    def __reduce__(self): ...
    __get__: Incomplete

def directlyProvidedBy(object): ...

class provider:
    interfaces: Incomplete
    def __init__(self, *interfaces) -> None: ...
    def __call__(self, ob): ...

def moduleProvides(*interfaces) -> None: ...
def ObjectSpecification(direct, cls): ...
def getObjectSpecification(ob): ...
def providedBy(ob): ...

class ObjectSpecificationDescriptor:
    def __get__(self, inst, cls): ...

objectSpecificationDescriptor: Incomplete
