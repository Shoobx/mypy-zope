from _typeshed import Incomplete
from zope.interface.interface import Interface

class IElement(Interface):
    __name__: Incomplete
    __doc__: Incomplete
    def getTaggedValue(tag) -> None: ...
    def queryTaggedValue(tag, default: Incomplete | None = ...) -> None: ...
    def getTaggedValueTags() -> None: ...
    def setTaggedValue(tag, value) -> None: ...
    def getDirectTaggedValue(tag) -> None: ...
    def queryDirectTaggedValue(tag, default: Incomplete | None = ...) -> None: ...
    def getDirectTaggedValueTags() -> None: ...

class IAttribute(IElement):
    interface: Incomplete

class IMethod(IAttribute):
    def getSignatureInfo() -> None: ...
    def getSignatureString() -> None: ...

class ISpecification(Interface):
    @staticmethod
    def providedBy(object) -> bool: ...
    @staticmethod
    def implementedBy(class_) -> bool: ...
    @staticmethod
    def isOrExtends(other) -> bool: ...
    @staticmethod
    def extends(other, strict: bool = ...) -> None: ...
    @staticmethod
    def weakref(callback: Incomplete | None = ...) -> None: ...
    __bases__: Incomplete
    __sro__: Incomplete
    __iro__: Incomplete
    def get(name, default: Incomplete | None = ...) -> None: ...

class IInterface(ISpecification, IElement):
    def names(all: bool = ...) -> None: ...
    def namesAndDescriptions(all: bool = ...) -> None: ...
    def __getitem__(name) -> None: ...
    def direct(name) -> None: ...
    def validateInvariants(obj, errors: Incomplete | None = ...) -> None: ...
    def __contains__(name) -> bool: ...
    def __iter__(): ...
    __module__: Incomplete

class IDeclaration(ISpecification):
    def __contains__(interface) -> bool: ...
    def __iter__(): ...
    def flattened() -> None: ...
    def __sub__(interfaces) -> None: ...
    def __add__(interfaces) -> None: ...
    def __nonzero__() -> None: ...

class IInterfaceDeclaration(Interface):
    Interface: Incomplete
    def taggedValue(key, value) -> None: ...
    def invariant(checker_function) -> None: ...
    def interfacemethod(method) -> None: ...
    def providedBy(ob) -> None: ...
    def implementedBy(class_) -> None: ...
    def classImplements(class_, *interfaces) -> None: ...
    def classImplementsFirst(cls, interface) -> None: ...
    def implementer(*interfaces) -> None: ...
    def classImplementsOnly(class_, *interfaces) -> None: ...
    def implementer_only(*interfaces) -> None: ...
    def directlyProvidedBy(object) -> None: ...
    def directlyProvides(object, *interfaces) -> None: ...
    def alsoProvides(object, *interfaces) -> None: ...
    def noLongerProvides(object, interface) -> None: ...
    def provider(*interfaces) -> None: ...
    def moduleProvides(*interfaces) -> None: ...
    def Declaration(*interfaces) -> None: ...

class IAdapterRegistry(Interface):
    def register(required, provided, name, value) -> None: ...
    def registered(required, provided, name: str = ...) -> None: ...
    def lookup(required, provided, name: str = ..., default: Incomplete | None = ...) -> None: ...
    def queryMultiAdapter(objects, provided, name: str = ..., default: Incomplete | None = ...) -> None: ...
    def lookup1(required, provided, name: str = ..., default: Incomplete | None = ...) -> None: ...
    def queryAdapter(object, provided, name: str = ..., default: Incomplete | None = ...) -> None: ...
    def adapter_hook(provided, object, name: str = ..., default: Incomplete | None = ...) -> None: ...
    def lookupAll(required, provided) -> None: ...
    def names(required, provided) -> None: ...
    def subscribe(required, provided, subscriber) -> None: ...
    def subscribed(required, provided, subscriber) -> None: ...
    def subscriptions(required, provided) -> None: ...
    def subscribers(objects, provided) -> None: ...

class ComponentLookupError(LookupError): ...
class Invalid(Exception): ...

class IObjectEvent(Interface):
    object: Incomplete

class ObjectEvent:
    object: Incomplete
    def __init__(self, object) -> None: ...

class IComponentLookup(Interface):
    adapters: Incomplete
    utilities: Incomplete
    def queryAdapter(object, interface, name: str = ..., default: Incomplete | None = ...) -> None: ...
    def getAdapter(object, interface, name: str = ...) -> None: ...
    def queryMultiAdapter(objects, interface, name: str = ..., default: Incomplete | None = ...) -> None: ...
    def getMultiAdapter(objects, interface, name: str = ...) -> None: ...
    def getAdapters(objects, provided) -> None: ...
    def subscribers(objects, provided) -> None: ...
    def handle(*objects) -> None: ...
    def queryUtility(interface, name: str = ..., default: Incomplete | None = ...) -> None: ...
    def getUtilitiesFor(interface) -> None: ...
    def getAllUtilitiesRegisteredFor(interface) -> None: ...

class IRegistration(Interface):
    registry: Incomplete
    name: Incomplete
    info: Incomplete

class IUtilityRegistration(IRegistration):
    factory: Incomplete
    component: Incomplete
    provided: Incomplete

class _IBaseAdapterRegistration(IRegistration):
    factory: Incomplete
    required: Incomplete
    provided: Incomplete

class IAdapterRegistration(_IBaseAdapterRegistration): ...
class ISubscriptionAdapterRegistration(_IBaseAdapterRegistration): ...

class IHandlerRegistration(IRegistration):
    handler: Incomplete
    required: Incomplete

class IRegistrationEvent(IObjectEvent): ...
class RegistrationEvent(ObjectEvent): ...
class IRegistered(IRegistrationEvent): ...
class Registered(RegistrationEvent): ...
class IUnregistered(IRegistrationEvent): ...
class Unregistered(RegistrationEvent): ...

class IComponentRegistry(Interface):
    def registerUtility(component: Incomplete | None = ..., provided: Incomplete | None = ..., name: str = ..., info: str = ..., factory: Incomplete | None = ...) -> None: ...
    def unregisterUtility(component: Incomplete | None = ..., provided: Incomplete | None = ..., name: str = ..., factory: Incomplete | None = ...) -> None: ...
    def registeredUtilities() -> None: ...
    def registerAdapter(factory, required: Incomplete | None = ..., provided: Incomplete | None = ..., name: str = ..., info: str = ...) -> None: ...
    def unregisterAdapter(factory: Incomplete | None = ..., required: Incomplete | None = ..., provided: Incomplete | None = ..., name: str = ...) -> None: ...
    def registeredAdapters() -> None: ...
    def registerSubscriptionAdapter(factory, required: Incomplete | None = ..., provides: Incomplete | None = ..., name: str = ..., info: str = ...) -> None: ...
    def unregisterSubscriptionAdapter(factory: Incomplete | None = ..., required: Incomplete | None = ..., provides: Incomplete | None = ..., name: str = ...) -> None: ...
    def registeredSubscriptionAdapters() -> None: ...
    def registerHandler(handler, required: Incomplete | None = ..., name: str = ..., info: str = ...) -> None: ...
    def unregisterHandler(handler: Incomplete | None = ..., required: Incomplete | None = ..., name: str = ...) -> None: ...
    def registeredHandlers() -> None: ...

class IComponents(IComponentLookup, IComponentRegistry): ...
