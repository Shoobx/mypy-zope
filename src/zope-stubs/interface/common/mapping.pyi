from _typeshed import Incomplete
from zope.interface import Interface as Interface
from zope.interface.common import collections as collections

class IItemMapping(Interface):
    def __getitem__(key) -> None: ...

class IReadMapping(collections.IContainer, IItemMapping):
    def get(key, default: Incomplete | None = ...) -> None: ...
    def __contains__(key) -> bool: ...

class IWriteMapping(Interface):
    def __delitem__(key) -> None: ...
    def __setitem__(key, value) -> None: ...

class IEnumerableMapping(collections.ISized, IReadMapping):
    def keys() -> None: ...
    def __iter__(): ...
    def values() -> None: ...
    def items() -> None: ...

class IMapping(IWriteMapping, IEnumerableMapping): ...
class IIterableMapping(IEnumerableMapping): ...

class IClonableMapping(Interface):
    def copy() -> None: ...

class IExtendedReadMapping(IIterableMapping): ...

class IExtendedWriteMapping(IWriteMapping):
    def clear() -> None: ...
    def update(d) -> None: ...
    def setdefault(key, default: Incomplete | None = ...) -> None: ...
    def pop(k, default: Incomplete | None = ...) -> None: ...
    def popitem() -> None: ...

class IFullMapping(collections.IMutableMapping, IExtendedReadMapping, IExtendedWriteMapping, IClonableMapping, IMapping): ...
