from _typeshed import Incomplete
from zope.interface import Interface as Interface
from zope.interface.common import collections as collections

__docformat__: str

class IMinimalSequence(collections.IIterable):
    def __getitem__(index) -> None: ...

class IFiniteSequence(collections.ISized, IMinimalSequence): ...

class IReadSequence(collections.IContainer, IFiniteSequence):
    def __contains__(item) -> bool: ...
    def __lt__(other): ...
    def __le__(other): ...
    def __eq__(other): ...
    def __ne__(other): ...
    def __gt__(other): ...
    def __ge__(other): ...
    def __add__(other) -> None: ...
    def __mul__(n) -> None: ...
    def __rmul__(n) -> None: ...

class IExtendedReadSequence(IReadSequence):
    def count(item) -> None: ...
    def index(item, *args) -> None: ...

class IUniqueMemberWriteSequence(Interface):
    def __setitem__(index, item) -> None: ...
    def __delitem__(index) -> None: ...
    def __iadd__(y) -> None: ...
    def append(item) -> None: ...
    def insert(index, item) -> None: ...
    def pop(index: int = ...) -> None: ...
    def remove(item) -> None: ...
    def reverse() -> None: ...
    def sort(cmpfunc: Incomplete | None = ...) -> None: ...
    def extend(iterable) -> None: ...

class IWriteSequence(IUniqueMemberWriteSequence):
    def __imul__(n) -> None: ...

class ISequence(IReadSequence, IWriteSequence): ...
